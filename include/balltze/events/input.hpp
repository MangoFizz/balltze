// SPDX-License-Identifier: GPL-3.0-only

#ifndef BALLTZE_API__EVENTS__INPUT_HPP
#define BALLTZE_API__EVENTS__INPUT_HPP

#include "../legacy_api/engine/user_interface.hpp"
#include "../events.hpp"

namespace Balltze::Events {
    class PlayerInputEvent : public EventData<PlayerInputEvent> {
    public:
        using InputDevice = LegacyApi::Engine::InputDevice;
        using GamepadButton = LegacyApi::Engine::GamepadButton;

        /**
         * Get the input device that generated the event.
         * 
         * @return The input device.
         */
        InputDevice device() const;

        /**
         * Get the code for the keyboard key that was pressed.
         * 
         * @return The key code.
         * @throws std::runtime_error If the event was not generated by a keyboard key.
         */
        std::size_t key_code() const;

        /**
         * Get the gamepad button that was pressed.
         * 
         * @return The gamepad button.
         * @throws std::runtime_error If the event was not generated by a gamepad button.
         */
        GamepadButton gamepad_button() const;

        /**
         * Check if the input is mapped to a specific action.
         * 
         * @return True if the input is mapped, false otherwise.
         */
        bool mapped() const;

        /**
         * Constructor for PlayerInputEvent.
         * 
         * @param device The input device that generated the event.
         * @param key_code The code for keyboard key that was pressed.
         * @param mapped Whether the input is mapped to a specific action.
         */
        PlayerInputEvent(InputDevice device, std::size_t key_code, bool mapped)
            : EventData(true), m_device(device), m_button(key_code), m_mapped(mapped) {}

        /**
         * Constructor for PlayerInputEvent with gamepad button.
         * 
         * @param device The input device that generated the event.
         * @param gamepad_button The gamepad button that was pressed.
         * @param mapped Whether the input is mapped to a specific action.
         */
        PlayerInputEvent(InputDevice device, GamepadButton gamepad_button, bool mapped)
            : EventData(true), m_device(device), m_button(gamepad_button), m_mapped(mapped) {}

    private:
        const InputDevice m_device;
        const union {
            std::size_t key_code;
            GamepadButton gamepad_button;
        } m_button;
        const bool m_mapped;
    };
}

#endif
