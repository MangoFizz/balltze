// SPDX-License-Identifier: GPL-3.0-only

#include <balltze/events/input.hpp>
#include <balltze/legacy_api/events/game_input.hpp>

namespace Balltze::Events {
    bool dispatch_player_input_event(PlayerInputEvent::InputDevice device, std::size_t key_code, bool mapped) {
        PlayerInputEvent event(device, key_code, mapped);
        event.dispatch();
        return event.cancelled();
    }

    bool dispatch_player_input_event(PlayerInputEvent::InputDevice device, PlayerInputEvent::GamepadButton gamepad_button, bool mapped) {
        PlayerInputEvent event(device, gamepad_button, mapped);
        event.dispatch();
        return event.cancelled();
    }

    PlayerInputEvent::InputDevice PlayerInputEvent::device() const {
        return m_device;
    }

    std::size_t PlayerInputEvent::key_code() const {
        if(m_device != InputDevice::INPUT_DEVICE_KEYBOARD) {
            throw std::runtime_error("Event was not generated by a keyboard key");
        }
        return m_button.key_code;
    }

    PlayerInputEvent::GamepadButton PlayerInputEvent::gamepad_button() const {
        if(m_device != InputDevice::INPUT_DEVICE_GAMEPAD) {
            throw std::runtime_error("Event was not generated by a gamepad button");
        }
        return m_button.gamepad_button;
    }

    bool PlayerInputEvent::mapped() const {
        return m_mapped;
    }

    template<>
    void EventHandler<PlayerInputEvent>::init() {
        if(m_initialized) {
            return;
        }
        m_initialized = true;

        LegacyApi::Event::GameInputEvent::subscribe([](auto &event) {
            if(event.time == LegacyApi::Event::EVENT_TIME_BEFORE) {
                bool cancelled = false;
                if(event.context.device == LegacyApi::Engine::INPUT_DEVICE_KEYBOARD) {
                    cancelled = dispatch_player_input_event(event.context.device, event.context.button.key_code, event.context.mapped);
                }
                else if(event.context.device == LegacyApi::Engine::INPUT_DEVICE_GAMEPAD) {
                    cancelled = dispatch_player_input_event(event.context.device, event.context.button.gamepad_button, event.context.mapped);
                }
                if(cancelled) {
                    event.cancel();
                }
            }
        });
    }
}
