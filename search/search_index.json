{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"Balltze <p> A plugin-loader/mod for Halo Custom Edition Installation         \u00b7         Report Bug         \u00b7         Request Feature </p> <p>Balltze is a mod for Halo Custom Edition that aims to be ultimate modding platform for the game, providing a wide range of features and tools to create all kind of mods through a powerful plugins  API. </p> <p>The mod is inspired by LeviLamina, a mod loader for Minecraft Bedrock Edition, and Chimera, the  most important mod for Halo on PC nowadays.</p> <p>Warning</p> <p>This project is still in development and may contain bugs or incomplete features. If you find any issues, please report them in the  issues page   or in the  Discord server.</p>"},{"location":"#contributing","title":"Contributing","text":"<p>If you have any suggestions or want to contribute in any other way to the project, feel free to do  so and submit a pull request. The project has big goals in mind so any contributions you make are  greatly appreciated .</p>"},{"location":"#special-mentions","title":"Special mentions","text":"<ul> <li> <p>Chimera - The biggest mod for Halo 1 on PC and  a great source of inspiration for the development of this mod.</p> </li> <li> <p>Lua-blam - The first library that dealt with the  manipulation of tag structures.</p> </li> <li> <p>Invader - Free and open source toolkit for Halo:  Combat Evolved for creating maps and assets. </p> </li> <li> <p>LeviLamina - A lightweight, modular and versatile mod  loader for Minecraft Bedrock Server which inspired the development of this mod as well.</p> </li> </ul>"},{"location":"#credits","title":"Credits","text":"<ul> <li>Elaya Deerson - Supplying assets for testing.</li> <li>Mark Camarena - Testing and ideas.</li> <li>MrChromed - Testing, ideas and moral support.</li> <li>Sledmine - Development and testing.</li> <li>SnowyMouse - Development of Chimera and Invader.</li> </ul>"},{"location":"#copyright","title":"Copyright","text":"<p>\u00a9 2024 MangoFizz. Distributed under the GNU General Public License v3.0. See LICENSE for more information.</p> <p>Halo is a registered trademark of Microsoft Corporation. </p>"},{"location":"install/","title":"Installation","text":""},{"location":"install/#using-mercury","title":"Using Mercury","text":"<p>Get Balltze with a single command: <pre><code>mercury install balltze\n</code></pre></p> <p>You can install Mercury by following the instructions on the official repository.</p>"},{"location":"install/#manual","title":"Manual","text":"<ol> <li>Install Chimera. This mod needs Chimera in order to work.</li> <li>Create a folder called \"mods\" (e.g. <code>D:\\Halo Custom Edition\\mods</code>).</li> <li>Grab the latest release from the releases page.</li> <li>Copy <code>balltze.dll</code> file to your mods folder.</li> <li>Copy the contents of the <code>data</code> folder on your <code>My Games\\Halo CE</code> folder.</li> <li>Launch the game for the first time after installing Balltze.</li> </ol>"},{"location":"install/#building","title":"Building","text":"<p>Balltze is intended to be easy to build, it uses CMake to generate all the necessary files to compile the project. Even though it is a simple process, there are some requirements that need to be met before building the project.</p> <p>As the result of the build process, you will get the DLL file and its link library that can be used to create plugins by developers.</p> <p>One of the points that need to be highlighted is that Balltze should be linked statically with the libraries it uses. This is to avoid needing to distribute the DLLs of the libraries with the mod, making it easier to install and use.</p>"},{"location":"install/#requirements","title":"Requirements","text":"<p>Tip</p> <p>If you are using  Arch Linux, you can get the required libraries from AUR repositories.</p> <ul> <li>MinGW GCC 12.2.0 (lastest version may not work correctly)</li> <li>CMake 3.22 or later</li> <li>Lua 5.3</li> <li>libflac 1.4.3</li> <li>libogg 1.3.5 </li> <li>libvorbis 1.3.7 </li> </ul>"},{"location":"install/#procedure","title":"Procedure","text":"<ol> <li>Clone the repository. <pre><code>git clone https://github.com/MangoFizz/balltze &amp;&amp; cd balltze\n</code></pre></li> <li>Create a build folder. <pre><code>mkdir build &amp;&amp; cd build\n</code></pre></li> <li>Generate the build files. <pre><code>cmake .. -DCMAKE_BUILD_TYPE=Release -DCMAKE_TOOLCHAIN_FILE=../toolchain-i686-w64-mingw32.cmake\n</code></pre></li> <li>Build the project. <pre><code>cmake --build .\n</code></pre></li> </ol> <p>Info</p> <p>Depending on your system, you may need to modify the toolchain file to match your  environment.</p>"},{"location":"install/#building-using-docker","title":"Building using Docker","text":"<p>There is a Dockerfile available for building the project without having to install libraries and tools on your system. You only need to have Docker installed on your system.</p> <p>To build the image, run: <pre><code>docker build . -t balltze-dev-env\n</code></pre> Now use docker compose to build the project: <pre><code>docker compose run build\n</code></pre> The compiled files will be available on the <code>build</code> folder inside of the project directory.</p>"},{"location":"features/overview/","title":"Overview","text":"<p>While Balltze purpose is to be a modding platform for Halo Custom Edition that makes it easy to create new mods, it also comes with a set of features that are meant to enhance the game experience, fix bugs or even add new functionalities to the game.</p> <p>Most of the features are enabled by default, but most of them can be disabled by changing the configuration file or using the in-game console commands to configure them. Settings file is located at <code>My Games/Halo CE/balltze/settings.json</code>, it is just a JSON file that can be edited with any text editor.</p> <p>The majority of the features were implemented by a request from ShadowMods community members, so if you have any ideas or suggestions for new features, feel free to share them in the  Discord server or in the GitHub repository. </p>"},{"location":"features/engine/extended-limits/","title":"Extended limits","text":""},{"location":"features/engine/extended-limits/#model-region-permutation-count","title":"Model region permutation count","text":"<p>The limit of model region permutations has been increased from 32 to 64. This allows models to  have more permutations, which can be used for creating more complex variations of the same model,  such as different armor sets for a character.</p>"},{"location":"features/engine/loading-screen/","title":"Loading screen","text":"<p>Adds a loading screen similar to the one from the Original Xbox version of the game.</p> <p>The loading screen also helps to prevent the game from freezing or timing out on multiplayer games when loading maps with a lot of tags or when plugins perform heavy operations during the  loading process. Is recommended to keep this feature enabled.</p> <p>Thanks to @SnowyMouse for the shader that was used to create the loading screen effect. </p> <p>Demo video of the loading screen.</p>"},{"location":"features/engine/loading-screen/#commands","title":"Commands","text":""},{"location":"features/engine/loading-screen/#enable_loading_screen","title":"enable_loading_screen","text":"<p>Syntax: <code>balltze_enable_loading_screen &lt;setting: boolean&gt;</code></p> <p>Set whether to set up loading screen at startup.</p>"},{"location":"features/engine/loading-screen/#test_loading_screen","title":"test_loading_screen","text":"<p>Syntax: <code>balltze_test_loading_screen</code></p> <p>Plays loading screen demo.</p>"},{"location":"features/engine/loading-screen/#configuration","title":"Configuration","text":"<p>The loading screen can be configured by editing the field <code>loading_screen</code> in the <code>settings.json</code> in the <code>My Games\\Halo CE\\balltze</code> folder. The available options are:</p> <ul> <li><code>enabled</code>: <code>boolean</code> - If the loading screen is enabled or not. Default is <code>true</code>.</li> </ul>"},{"location":"features/engine/loading-screen/#example-of-config-file","title":"Example of config file","text":"My Games\\Halo CE\\balltze\\config\\settings.json<pre><code>{\n    \"loading_screen\": {\n        \"enabled\": true\n    }\n}\n</code></pre>"},{"location":"features/engine/map-textures-preloading/","title":"Map textures preloading","text":"<p>Preloads the textures of the map when the game is loading. This feature can help to reduce  the stuttering that occurs when the game loads textures during gameplay, especially on maps  with a lot of high-resolution textures.</p>"},{"location":"features/engine/map-textures-preloading/#configuration","title":"Configuration","text":"<p>The map textures preloading can be configured by editing the field <code>preload_map_textures</code>. The available options are:</p> <ul> <li> <p><code>enabled</code>: <code>boolean</code> - If the map textures preloading is enabled or not. Default is <code>false</code>.</p> </li> <li> <p><code>min_map_size</code>: <code>number</code> - The minimum size of the map in MB to preload the textures, if the map size is less than this value, the textures will not be preloaded. Default is <code>384</code>.</p> </li> </ul>"},{"location":"features/engine/map-textures-preloading/#example-of-config-file","title":"Example of config file","text":"My Games\\Halo CE\\balltze\\config\\settings.json<pre><code>{\n    \"preload_map_textures\": {\n        \"enabled\": true,\n        \"min_map_size\": 384\n    }\n}\n</code></pre>"},{"location":"features/engine/sound-subtitles/","title":"Sound subtitles","text":"<p>Displays subtitles for the dialog sounds in the game. This feature takes advantage of the unused <code>subtitle data</code> field in the sound tags to store the subtitles. The subtitles are displayed at the  bottom of the screen when the sound is played as in any modern game.</p> <p>At the moment there is no way to include the subtitles in the sound tags.</p> <p>Demo video of the sound subtitles.</p>"},{"location":"features/engine/sound-subtitles/#configuration","title":"Configuration","text":"<p>The sound subtitles are enabled by default and cannot be disabled. There are no configuration options for this feature.</p>"},{"location":"features/engine/tags-handling/","title":"Tags handling","text":"<p>Danger</p> <p>This feature may crash the game if it is used on maps that are broken or have corrupted tags.  Use it with caution. </p> <p>Note</p> <p>This feature is intended for developers, as it is only accessible through the plugins API.</p> <p>Provides a set of functions for manipulating tag data, allowing you to create fully  independent tag copies at runtime. These copies can be modified without altering the original tag  data, so any modifications can be easily reverted by reloading the original values into their  copies, making it ideal for generating dynamic content. For example, it can be used for creating  variations of existing weapons, vehicles, or bipeds that can be used as skins.</p> <p>The above mentioned function also makes possible the most powerful function of this feature:  the ability to import tags from other maps. As the name suggests, this allows to copy tags from other maps and use them in the current loaded one. </p>"},{"location":"features/engine/tags-handling/#virtual-tag-data","title":"Virtual tag data","text":"<p>One of the most important parts of this feature is the virtual tag data block. This is a 64 MiB  memory block that is used to store the tag data of the copied tags. This block is managed by  Balltze and is independent from the original tag data.</p> <p>Since the tag array in cache files has a fixed size and new tags cannot be added to the end of it without overwriting existing map tag data, the tags array is reallocated to the virtual tag data  block, this means that the pointer of the tag array in the tag data header will be updated to point  to the new tag array. This is important to note, as it could potentially cause issues with other mods or Chimera Lua scripts that assume the tag array remains in its original location.</p>"},{"location":"features/shaders/hud-meters/","title":"HUD meters","text":"<p>The purpose of this reimplementation is to restore how the HUD meters are rendered in the original xbox release of the game. </p> <p>To ensure compatibility with existing HUD meters, by default, this reimplementation works just like the original Gearbox implementation. Following the example of how it works in TMCC, the new rendering can be activated by setting the <code>use xbox shading</code> flag in the meter flags. Once this flag is set, the  <code>translucency</code> and <code>opacity</code> fields in the tag will control the transparency and color opacity  of the meter. Additionally, the alpha channel of the <code>empty color</code> field will now be required to control  the transparency of the empty color of the meter, and the <code>flash color</code> field will be used for the draining  effect.</p> <p>Note</p> <p>Since the <code>use xbox shading</code> flag is not present in the original game and in its editing kit tools, it is recommended to use invader-edit from Invader to set this  flag in the meter tags.  Screenshot of the invader-edit tool showing the <code>use xbox shading</code> flag of a meter. </p>"},{"location":"features/shaders/hud-meters/#explanation","title":"Explanation","text":"<p>The Gearbox implementation of the HUD meters present in the PC releases of the game uses a different shading technique. It utilizes each RGB channel of the texture as its own alpha, meaning that the closer the color is to black, the more transparent it becomes. Therefore, you cannot, for example, have a fully black color in the texture because it would be completely transparent. This is not the case in the original Xbox release of the game, where the transparency is controlled by the translucency field in the meter settings. </p> <p>Due to this difference in how the transparency is controlled, you cannot use opaque colors in the texture and expect them to be opaque in the game, causing the meters to look too transparent and in some cases, like in bright environments, almost invisible. Here is a comparison of how the meters looks on a bright environment between Gearbox, TMCC, and this reimplementation:</p> HUD meters comparison between Gearbox, TMCC, and this reimplementation."},{"location":"features/shaders/hud-meters/#commands","title":"Commands","text":""},{"location":"features/shaders/hud-meters/#hud_meters_force_xbox_shading","title":"hud_meters_force_xbox_shading","text":"<p>Syntax: <code>balltze_hud_meters_force_xbox_shading &lt;setting: boolean&gt;</code></p> <p>Set whether to force the rendering of every HUD meter using the xbox shading.</p>"},{"location":"features/user_interface/console-key-custom-binding/","title":"Console key custom binding","text":"<p>Allows to bind a custom key to open the console in the game. By default, the console is  opened by pressing the tilde key (<code>~</code>), but with this feature, you can bind it to any key you want.</p>"},{"location":"features/user_interface/console-key-custom-binding/#configuration","title":"Configuration","text":"<p>The console key can be configured by using the <code>balltze_set_console_key_binding</code> command in the  console. The command takes a single argument, which is the key that you want to bind to the console.  The key must be specified as a number. The following are the possible values for the key:</p> Key Name Value ESCAPE 0 F1 1 F2 2 F3 3 F4 4 F5 5 F6 6 F7 7 F8 8 F9 9 F10 10 F11 11 F12 12 PRINT_SCREEN 13 SCROLL_LOCK 14 PAUSE_BREAK 15 TILDE 16 TOP_1 17 TOP_2 18 TOP_3 19 TOP_4 20 TOP_5 21 TOP_6 22 TOP_7 23 TOP_8 24 TOP_9 25 TOP_0 26 TOP_MINUS 27 TOP_EQUALS 28 BACKSPACE 29 TAB 30 Q 31 W 32 E 33 R 34 T 35 Y 36 U 37 I 38 O 39 P 40 LEFT_BRACKET 41 RIGHT_BRACKET 42 BACK_SLASH 43 CAPS_LOCK 44 A 45 S 46 D 47 F 48 G 49 H 50 J 51 K 52 L 53 SEMICOLON 54 APOSTROPHE 55 ENTER 56 LEFT_SHIFT 57 Z 58 X 59 C 60 V 61 B 62 N 63 M 64 COMMA 65 PERIOD 66 FORWARD_SLASH 67 RIGHT_SHIFT 68 LEFT_CONTROL 69 WINDOWS_KEY 70 LEFT_ALT 71 SPACE 72 RIGHT_ALT 73 UNKNOWN 74 MENU 75 RIGHT_CONTROL 76 UP_ARROW 77 DOWN_ARROW 78 LEFT_ARROW 79 RIGHT_ARROW 80 INS 81 HOME 82 PAGE_UP 83 DEL 84 END 85 PAGE_DOWN 86 NUM_LOCK 87 NUM_STAR 88 NUM_FORWARD_SLASH 89 NUM_0 90 NUM_1 91 NUM_2 92 NUM_3 93 NUM_4 94 NUM_5 95 NUM_6 96 NUM_7 97 NUM_8 98 NUM_9 99 NUM_MINUS 100 NUM_PLUS 101 NUM_ENTER 102 NUM_DECIMAL 103"},{"location":"features/user_interface/gamepad-pause-button/","title":"Gamepad pause button","text":"<p>Allows you to bind a gamepad button to pause the game. By default, the game is  paused by pressing the <code>ESC</code> key on the keyboard, but with this feature, you can bind it to  any button on your gamepad.</p>"},{"location":"features/user_interface/gamepad-pause-button/#configuration","title":"Configuration","text":"<p>The gamepad pause button can be configured at the field <code>pause_button</code> in the gamepad config  file, which is located in the <code>My Games\\Halo CE\\balltze\\config\\gamepad</code> folder. The active gamepad config can be selected in the <code>settings.json</code> at the field <code>gamepad</code>.</p>"},{"location":"features/user_interface/gamepad-pause-button/#predefined-gamepad-models","title":"Predefined gamepad models","text":"<p>At the moment, config files for the following gamepad models are already available:</p> <ul> <li> <p><code>xbox_360_windows</code></p> </li> <li> <p><code>dual_shock_1_windows</code></p> </li> </ul> <p>You can choose one of these config files or create your own gamepad config file by  creating a new JSON file in the <code>gamepad</code> folder and then setting the <code>pause_button</code> field  to the button index that you want to use. </p> <p>Then you can set the your gamepad config in the <code>settings.json</code> file.</p>"},{"location":"features/user_interface/gamepad-pause-button/#example-of-config-files","title":"Example of config files","text":"My Games\\Halo CE\\balltze\\config\\settings.json<pre><code>{\n    \"gamepad\": \"xbox_360_windows\"\n}\n</code></pre> My Games\\Halo CE\\balltze\\config\\gamepad\\xbox_360_windows.json<pre><code>{\n    \"pause_button\": 3\n}\n</code></pre> <p>Note</p> <p>The value of the <code>pause_button</code> field must be a number that represents the button index. The possible values for the button index depend on the gamepad model. </p> <p>You can see some examples at the default config files.</p>"},{"location":"features/user_interface/hud-button-prompts/","title":"HUD button prompts","text":"<p>Restores the button prompts that are displayed in the HUD when using a gamepad. It behaves like in HCEA in MCC, where the button prompts are only displayed in the HUD when using  a gamepad.</p>"},{"location":"features/user_interface/hud-button-prompts/#demo-video","title":"Demo video","text":""},{"location":"features/user_interface/hud-button-prompts/#configuration","title":"Configuration","text":"<p>Like in the gamepad pause button feature, the HUD  button prompts can be configured in the gamepad config file. The field <code>icons</code> maps the gamepad  buttons to the corresponding icons that will be displayed in the HUD.</p>"},{"location":"features/user_interface/hud-button-prompts/#example-of-config-file","title":"Example of config file","text":"My Games\\Halo CE\\balltze\\config\\gamepad\\xbox_360_windows.json<pre><code>{\n    \"icons\": {\n        \"button_0\": 0,\n        \"button_1\": 1,\n        \"button_2\": 2,\n        \"button_3\": 3,\n        \"button_4\": 4,\n        \"button_5\": 5,\n        \"button_6\": 13,\n        \"button_7\": 12,\n        \"button_8\": 14,\n        \"button_9\": 15,\n        \"axis_4+\": 6,\n        \"axis_4-\": 7\n    },\n    \"pause_button\": 7\n}\n</code></pre> <p>You can see some examples at the default config files.</p>"},{"location":"features/user_interface/multiplayer-menu-extended-description-fix/","title":"Mp extended description fix","text":"<p>Fixes the issue where the extended description of the multiplayer menu is not displayed the correct bitmap for the buttons under the \"Create game\" section. The issue is caused by the game not setting the correct bitmap index.</p> <p></p> <p>Screenshot of the multiplayer menu showing the extended description fix.</p>"},{"location":"features/user_interface/multiplayer-menu-extended-description-fix/#configuration","title":"Configuration","text":"<p>This feature is enabled by default and cannot be disabled. The configuration is not required.</p>"},{"location":"features/user_interface/widget-widescreen-support/","title":"Widget custom aspect ratio","text":"<p>Note</p> <p>This feature is intended for developers, as it is only accessible through the plugins API.</p> <p>Allows to set a custom aspect ratio for the UI. This feature can be useful to develop UIs for  custom resolutions or aspect ratios like Insurrection, which uses a 16:9 aspect ratio.</p> <p></p> <p>Screenshot of 16:9 user interface from Insurrection UI.</p>"},{"location":"plugins/first-lua-plugin/","title":"Creating your first Lua plugin","text":"<p>Once you have Balltze installed and all the required tools set up you can start creating your own  plugins. In this guide we will create a simple Lua plugin that will print a message to the game  console.</p>"},{"location":"plugins/first-lua-plugin/#lets-get-started","title":"Let's get started","text":"<p>To create a new plugin, there is a template repository that you can use as a starting point. It  contains the Lua annotations that you can use to get code completion and documentation in your IDE.  You can create a new repository from the template by clicking on the \"Use this template\" button on  the repository page.</p>"},{"location":"plugins/first-lua-plugin/#step-1-clone-the-repository","title":"Step 1: Clone the repository","text":"<p>Once you have created a new repository from the template, you can clone it to your local machine  using Git. Open a terminal and run the following command:</p> <pre><code>git clone https://github.com/yourusername/my-lua-plugin.git\n</code></pre> <p>Replace <code>yourusername</code> with your GitHub username and <code>my-lua-plugin</code> with the name of the  repository you created from the template (or just copy the link from the repository page).</p>"},{"location":"plugins/first-lua-plugin/#step-2-open-the-project-in-your-ide","title":"Step 2: Open the project in your IDE","text":"<p>Open the project in your favorite code editor. We recommend using Visual Studio Code with the Lua  Language Server extension from sumneko. This extension provides code completion, type checking, and  other features that will help you develop your plugin. </p> <p>You can install the Lua Language Server extension from the Visual Studio Code marketplace:</p> <p>Download Lua Language Server for VS Code</p>"},{"location":"plugins/first-lua-plugin/#step-3-creating-the-plugin","title":"Step 3: Creating the plugin","text":"<p>Create a new folder called <code>lua</code> in the root of the project. Inside this folder, create a new Lua  file called <code>hello.lua</code>. </p> <p>As you could see in the Introduction, Lua plugins are organized in a specific structure that allows  Balltze to manage them. We need to create three functions in the <code>hello.lua</code> file: <code>PluginLoad</code>,  <code>PluginUnload</code>, and <code>PluginMetadata</code>. These functions will be called by Balltze when the plugin is  loaded, unloaded, and to get the plugin metadata, respectively.</p> <p>The PluginMetadata function should return a table with the plugin metadata, with the following  fields: <code>name</code>, <code>author</code>, <code>version</code>, and <code>description</code>. The PluginLoad must return a boolean value  indicating if the plugin was loaded successfully. The PluginUnload function is optional and can be  used to clean up resources when the plugin is unloaded.</p> <p>Here is an example of the <code>hello.lua</code> file:</p> <pre><code>local function PluginMetadata()\n    return {\n        name = \"Hello Plugin\",\n        author = \"Your Name\",\n        version = \"1.0.0\",\n        description = \"A simple Lua plugin that prints a message to the console.\"\n    }\nend\n\nlocal function PluginLoad()\n    Engine.core.consolePrint(\"Hello from the Hello Plugin!\")\n    return true\nend\n</code></pre>"},{"location":"plugins/first-lua-plugin/#step-4-loading-the-plugin","title":"Step 4: Loading the plugin","text":"<p>In order to load the plugin in Balltze, you need to copy you main Lua file to the <code>plugins</code> folder  in the Balltze directory. The <code>plugins</code> folder is located in the Balltze folder at <code>My Games\\Halo  CE\\balltze\\plugins</code>. Every plugin placed in this folder will be loaded by Balltze, no matter if it  is written in Lua or C++. So you can copy the <code>hello.lua</code> file to the <code>plugins</code> folder and we  should be ready to go.</p>"},{"location":"plugins/first-lua-plugin/#step-5-testing-the-plugin","title":"Step 5: Testing the plugin","text":"<p>Now that the plugin is loaded, you can start Halo CE and open the console by pressing the tilde key  (<code>~</code>). You should see the message printed by the plugin in the console.</p> <p>Congratulations! You have created your first Lua plugin for Balltze. You can now start experimenting  with more complex plugins and features. Continue reading the documentation to learn more about the  Balltze API and how to create more advanced plugins.</p>"},{"location":"plugins/introduction/","title":"Introduction","text":""},{"location":"plugins/introduction/#getting-started","title":"Getting started","text":"<p>Balltze is not just capable of adding new features to the game, it also extends and provides features that are already present in the game exposing them through a powerful API that can be used by plugins.</p> <p>Plugins can (at the moment) be written in Lua or C++ and can be loaded and unloaded at runtime,  allowing for quick testing and development of new features. Plugins were designed in mind for  modders to create their own features and extend the game in ways that are not possible through  the base game engine, such as adding new commands, new user interface elements or even creating  new game modes giving them new rules and mechanics.</p>"},{"location":"plugins/introduction/#supported-languages","title":"Supported languages","text":""},{"location":"plugins/introduction/#lua","title":"Lua","text":"<p>Lua is a powerful, efficient, lightweight, embeddable scripting language. It supports procedural programming, object-oriented programming, functional programming, data-driven programming, and data description.</p> <p>It is a great choice for creating plugins that require fast prototyping and development, as it is a high-level language that is easy to learn and use.</p> <p>It requires a minimal setup, as it is interpreted at runtime by the game engine and just a few set of tools are required to develop and test plugins. We also provide a strong IDE integration trough the use of EmmyLua annotations that can be used to provide code completion and some sort of type checking, but keep in mind it does not have the same level of control over the game as  C++.</p> <p>In summary, Lua offers fast prototyping and development, making it easy to learn and use with  minimal setup required. However, it may not be ideal for more complex plugins that demand  low-level access to the game engine.</p> <p>To develop Lua plugins, all you need is a code editor and a Lua language server. </p>"},{"location":"plugins/introduction/#c","title":"C++","text":"<p>C++ is a powerful, high-performance, and versatile programming language. It is widely used in game development, system programming, and other performance-critical applications.</p> <p>While C++ offers high performance and versatility, making it ideal for developing complex  plugins that require low-level access to the game engine, it comes with a more complex setup  and build process compared to Lua, as it needs to be compiled and developed with a  well-configured IDE. Additionally, it requires a deep understanding of programming concepts  and best practices, which can be a drawback for fast prototyping and development.</p> <p>To develop C++ plugins, you will need the following tools:</p> <ul> <li> <p>MinGW GCC 12.2.0 - A Windows port of the  GNU Compiler Collection (GCC) that provides a set of tools for building C and C++ programs.</p> </li> <li> <p>CMake 3.16 or later - A cross-platform build system that  generates native build files.</p> </li> </ul> <p>Note</p> <p>You can also use Docker to build the project without having to install the tools on your  system. Note that you may also need the Mingw GCC compiler installed on your system to  set up your IDE's IntelliSense.</p>"},{"location":"plugins/introduction/#plugins-folder","title":"Plugins folder","text":"<p>Plugins are organized in a specific structure that allows Balltze to load and manage them.  The plugins folder is located in the Balltze folder at <code>My Games\\Halo CE\\balltze\\plugins</code>.  Every plugin placed on this folder will be loaded by Balltze, no matter if it is written in Lua  or C++. </p> <p>Each plugin can have its own folder where all the files related to the plugin are placed,  like modules, assets or configuration files. A plugin folder structure can look like this:</p> <pre><code>My Games\\Halo CE\\balltze\\plugins\n\u251c\u2500\u2500 my_plugin\n\u2502   \u251c\u2500\u2500 assets\n\u2502   \u2502   \u2514\u2500\u2500 my_asset.png\n\u2502   \u251c\u2500\u2500 config\n\u2502   \u2502   \u2514\u2500\u2500 my_config.json\n\u2502   \u251c\u2500\u2500 modules\n\u2502   \u2502   \u2514\u2500\u2500 my_module.lua\n\u2502   \u2514\u2500\u2500 my_plugin.lua\n\u2514\u2500\u2500 my_plugin.lua\n</code></pre>"},{"location":"plugins/introduction/#plugins-lifecycle","title":"Plugins lifecycle","text":"<p>Plugins must provide some specific functions that Balltze will call at different points of the plugin lifecycle, like when the plugin is loaded or unloaded. The functions that must be provided are:</p> <ul> <li> <p>Plugin metadata: A function that returns an structure with the plugin metadata, like the name,  author, version, and description.</p> </li> <li> <p>Plugin load: A function that is called when the plugin is loaded by Balltze. This function is responsible for initializing the plugin and setting up any required resources or event listeners. It returns a boolean value indicating whether the plugin was loaded successfully.</p> </li> <li> <p>Plugin unload: A function that is called when the plugin is unloaded by Balltze. This function is responsible for cleaning up any resources or event listeners that were set up during the plugin load. This may be called when the game is closed or when the plugin is reloaded manually. </p> </li> </ul> <p>Info</p> <p>The unload function can be omitted if the plugin does not require any cleanup or if is not meant  to be reloaded.</p>"}]}